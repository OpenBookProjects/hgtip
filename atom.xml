<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mercurial tips from hgtip.com</title><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/atom.xml" rel="self"/><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip"/><updated>2011-11-03T18:59:08Z</updated><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/</id><entry><title>Debug Command Tricks</title><author><name>Friedrich Kastner-Masilko</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2010-04-23-debug-command-tricks.html"/><updated>2010-04-23T00:00:00Z</updated><published>2010-04-23T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2010-04-23-debug-command-tricks.html/</id><content type="html">
       
    
    &lt;p&gt;If you tried &lt;code&gt;hg help --debug&lt;/code&gt;, you may be familiar with the commands prefixed
with &amp;#8216;debug&amp;#8217;. Most of them are used to inspect Mercurial&amp;#8217;s internal storage,
but some can come handy in certain situations. Two of these commands are &lt;code&gt;hg
debugsetparents&lt;/code&gt; and &lt;code&gt;hg debugrebuildstate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first command forces Mercurial to forget the &amp;#8220;real&amp;#8221; parent revisions of a
working-copy in favor of the specified revisions in &amp;#8216;debugsetparents&amp;#8217;. The
second command is forcing Mercurial to rebuild its internal&amp;nbsp;state.&lt;/p&gt;
&lt;p&gt;So how can this be useful in normal conditions at all? Here are 3 scenarios
where it comes handy to work with&amp;nbsp;them:&lt;/p&gt;
&lt;h3 id=&quot;1-late-binding-working-copy-with-repository&quot;&gt;1. Late-binding working-copy with&amp;nbsp;repository.&lt;/h3&gt;
&lt;p&gt;Imagine an interesting project hosted with Mercurial. At first you only
download a snapshot of the project to inspect the code and try something out.
You didn&amp;#8217;t clone it fully, because you wanted to avoid the overhead to just
check the&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;Later in the process of playing with the code, you realize that this is going
to be a longer-lasting relationship, so you decide to clone the repo and
commit your changes. Since it is quite a big working-copy and you
renamed/deleted/added some files, you don&amp;#8217;t want to copy the whole thing over
some checkout in order to not confuse the working-copy state. So how to commit
this state at the proper&amp;nbsp;location?&lt;/p&gt;
&lt;p&gt;The solution is to copy the .hg folder into the snapshot&amp;#8217;s root and&amp;nbsp;issue:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg debugsetparent tip
$ hg debugrebuildstate
$ hg commit -Am &quot;my snapshot&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;2-creating-alternate-check-ins&quot;&gt;2. Creating alternate&amp;nbsp;check-ins.&lt;/h3&gt;
&lt;p&gt;If you are anything like me, you don&amp;#8217;t trust yourself. Therefore, you&amp;#8217;d want
to add alternative work &lt;span class=&quot;caps&quot;&gt;BEFORE&lt;/span&gt; you delete one of the alternatives. So the
usual workflow of using rollback to take back an ill-composed commit is not
your&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;Instead, it is possible to&amp;nbsp;simply:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg debugsetparent tip^^
$ hg debugrebuildstate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you are back at the state you where before you commited, just with the
&amp;#8220;wrong&amp;#8221; commit still&amp;nbsp;there.&lt;/p&gt;
&lt;h3 id=&quot;3-simulate-gits-no-ff-merges-with-anonymous-heads&quot;&gt;3. Simulate Git&amp;#8217;s &amp;#8212;no-ff merges with anonymous&amp;nbsp;heads.&lt;/h3&gt;
&lt;p&gt;Most of the workflows for Git are easily reproducible with Mercurial, but some
of them (&lt;a href=&quot;http://nvie.com/git-model&quot;&gt;gitflow&lt;/a&gt;) use so-called &amp;#8220;non-fast-forward&amp;#8221; merges. These merges
can be done in Mercurial, too, but only with&amp;nbsp;named-branches:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg sl
$ echo x &amp;gt; x
$ hg ci -Am &quot;base&quot;
adding x
$ hg branch feature
marked working directory as branch feature
$ echo y &amp;gt; x
$ hg ci -m &quot;feature&quot;
$ hg up default
1 files updated, 0 files merged, 0 files removed, 0 files unresolved
$ hg merge feature
1 files updated, 0 files merged, 0 files removed, 0 files unresolved
(branch merge, don&#39;t forget to commit)
$ hg ci -m &quot;merged&quot;
$ hg glog
@    changeset:   2:e0502e1d12c6
|\   tag:         tip
| |  parent:      0:387ca709aeaf
| |  parent:      1:205ec0dce78f
| |  summary:     merged
| |
| o  changeset:   1:205ec0dce78f
|/   branch:      feature
|    summary:     feature
|
o  changeset:   0:387ca709aeaf
   summary:     base
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see in the above graphlog output, the merge contains no actual
information besides indicating the merging of two named-branches (&amp;#8216;default&amp;#8217;
and &amp;#8216;feature&amp;#8217;). As with Mercurial 1.5.1, you can&amp;#8217;t do that with anonymous&amp;nbsp;heads:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo x &amp;gt; x
$ hg ci -Am &quot;base&quot;
adding x
$ echo y &amp;gt; x
$ hg ci -m &quot;feature&quot;
$ hg up 0
1 files updated, 0 files merged, 0 files removed, 0 files unresolved
$ hg merge 1
abort: nothing to merge (use &#39;hg update&#39; or check &#39;hg heads&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why would you want to do that with anonymous heads, anyway? Well, one way of
simulating Git branches is the bookmark extension. Unfortunately, using
bookmarks (to name anonymous heads) is still using anonymous heads, so the
above problem gets in your&amp;nbsp;way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg bookmark master
$ hg bookmark feature -r 1
$ hg bookmark
 * master                    0:6965ee5bb884
   feature                   1:2061809a8e23
$ hg merge feature
abort: nothing to merge (use &#39;hg update&#39; or check &#39;hg heads&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The&amp;nbsp;solution:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg debugsetparents master feature
$ hg revert -a -r feature
reverting x
$ hg ci -m &quot;merged&quot;
$ hg glog
@    changeset:   2:0dfae55684f6
|\   tag:         master
| |  tag:         tip
| |  parent:      0:6965ee5bb884
| |  parent:      1:2061809a8e23
| |  summary:     merged
| |
| o  changeset:   1:2061809a8e23
|/   tag:         feature
|    summary:     feature
|
o  changeset:   0:6965ee5bb884
   summary:     base
&lt;/code&gt;&lt;/pre&gt;
    
    
   </content></entry><entry><title>进度条</title><author><name>David Harrigan</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/beginner/2010-03-24-keeping-informed-with-progress.html"/><updated>2010-03-24T00:00:00Z</updated><published>2010-03-24T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/beginner/2010-03-24-keeping-informed-with-progress.html/</id><content type="html">
       
    
    &lt;p&gt;有时 Mercurial 在处理多个文件时,在命令中会顿住不知道是否正常执行中.
好在1.5之后,有内置扩展来改进.只要先[修订你的配置文件: &amp;#8216;~/.hgrc&amp;#8217;]hgrc]&amp;nbsp;包含类似声明:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[extensions]
progress =
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个伶俐的小扩展,将使你在比较耗时的操作时的到这样的输出:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;
    &lt;a href=&quot;https://github.com/ZoomQuiet/hgtip/blob/gh-pages/beginner/progress-verify.png&quot;
       title=&quot;Progress when verifying a Mercurial repository&quot;&gt;
        &lt;img src=&quot;http://zoomquiet.github.com/hgtip/beginner/progress-verify.png&quot;
             class=&quot;force-border&quot;
             alt=&quot;Progress when verifying a Mercurial repository&quot;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;注意到漂亮的进度条了嘛?&amp;nbsp;这有另外一个实例:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;
    &lt;a href=&quot;https://github.com/ZoomQuiet/hgtip/blob/gh-pages/beginner/progress-clone-remote.png&quot;
       title=&quot;Progress when cloning a remote Mercurial repository&quot;&gt;
        &lt;img src=&quot;http://zoomquiet.github.com/hgtip/beginner/progress-clone-remote.png&quot;
             class=&quot;force-border&quot;
             alt=&quot;Progress when cloning a remote Mercurial repository&quot;/&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;希望这一技巧能帮到你.
有关这一扩展的更多信息,请参考Mercurial 维基中 &lt;a href=&quot;http://mercurial.selenic.com/wiki/ProgressExtension&quot;&gt;progress&lt;/a&gt;&amp;nbsp;页面.&lt;/p&gt;
    
    
   </content></entry><entry><title>Merging MQ Patches with Rebase</title><author><name>Steve Losh</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2010-02-11-merging-mq-patches-with-rebase.html"/><updated>2010-02-11T00:00:00Z</updated><published>2010-02-11T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2010-02-11-merging-mq-patches-with-rebase.html/</id><content type="html">
       
    
    &lt;p&gt;&lt;strong&gt;First of all:&lt;/strong&gt; I want to try something new with this tip. This is the first
tip that includes a screencast. It&amp;#8217;s a complex topic and I think a screencast
is the best way to talk about it. Please post a comment and let me know if you
like it or if you think hgtip should stick to text-only&amp;nbsp;tips!&lt;/p&gt;
&lt;p&gt;This tip is for those of you that are familiar and comfortable with using
&lt;a href=&quot;http://mercurial.selenic.com/wiki/MqExtension&quot;&gt;&lt;span class=&quot;caps&quot;&gt;MQ&lt;/span&gt;&lt;/a&gt; to handle patches. If you use &lt;span class=&quot;caps&quot;&gt;MQ&lt;/span&gt; regularly you may have noticed some
problems. One of the biggest problems appears when you have some patches and
someone else commits something that changes the files you&amp;#8217;re working&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;The normal workflow is to pull their changes, &lt;code&gt;qpop&lt;/code&gt; your patches, update to
the new repository (or branch) tip, and &lt;code&gt;qpush&lt;/code&gt; your patches. Unfortunately &lt;span class=&quot;caps&quot;&gt;MQ&lt;/span&gt;
doesn&amp;#8217;t keep track of the parents of patches, so it can&amp;#8217;t intelligently merge
changes when you &lt;code&gt;qpush&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way to get around this limitation is to use the &lt;a href=&quot;http://mercurial.selenic.com/wiki/RebaseExtension&quot;&gt;rebase extension&lt;/a&gt; to
rebase your &lt;span class=&quot;caps&quot;&gt;MQ&lt;/span&gt; patches while they&amp;#8217;re still applied. I&amp;#8217;ll demonstrate how to do
this in the screencast&amp;nbsp;below:&lt;/p&gt;
&lt;div class=&quot;screencast&quot;&gt;
&lt;object classid=&#39;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&#39; codebase=&#39;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,115,0&#39; width=&#39;560&#39; height=&#39;345&#39;&gt;&lt;param name=&#39;movie&#39; value=&#39;http://screenr.com/Content/assets/screenr_1116090935.swf&#39; /&gt;&lt;param name=&#39;flashvars&#39; value=&#39;i=46386&#39; /&gt;&lt;param name=&#39;allowFullScreen&#39; value=&#39;true&#39; /&gt;&lt;embed src=&#39;http://screenr.com/Content/assets/screenr_1116090935.swf&#39; flashvars=&#39;i=46386&#39; allowFullScreen=&#39;true&#39; width=&#39;560&#39; height=&#39;345&#39; pluginspage=&#39;http://www.macromedia.com/go/getflashplayer&#39;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;/div&gt;
    
    
   </content></entry><entry><title>Styling Mercurial’s CLI</title><author><name>Steve Losh</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2010-01-15-styling-mercurials-cli.html"/><updated>2010-01-15T00:00:00Z</updated><published>2010-01-15T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2010-01-15-styling-mercurials-cli.html/</id><content type="html">
       
    
    &lt;p&gt;Mercurial has a great command line interface and many people use it without
ever feeling the need for a &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; to manage their repositories. However, we can
make it even better by taking advantage of Mercurial&amp;#8217;s templating&amp;nbsp;features.&lt;/p&gt;
&lt;p&gt;In this tip I&amp;#8217;m going to post some of the templates I use and show you how to
use them yourself. Check out &lt;code&gt;hg help templating&lt;/code&gt; if you want more details on
how the templating actually&amp;nbsp;works.&lt;/p&gt;
&lt;p&gt;If you like what you see you can grab my templates by cloning their
&lt;a href=&quot;http://bitbucket.org/sjl/mercurial-cli-templates/&quot;&gt;repository&lt;/a&gt; from&amp;nbsp;BitBucket:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hg clone http://bitbucket.org/sjl/mercurial-cli-templates/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;NOTE&lt;/span&gt;:&lt;/strong&gt; I&amp;#8217;ve customized the colors of my Terminal, so the colors will look
different for you. If you like the colors I&amp;#8217;m using you can read the
&lt;a href=&quot;http://stevelosh.com/blog/2009/03/candy-colored-terminal/&quot;&gt;blog entry&lt;/a&gt; I wrote about&amp;nbsp;it.&lt;/p&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#short-log&quot;&gt;Short Log&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#nice-log&quot;&gt;Nice&amp;nbsp;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#short-graphlog&quot;&gt;Short&amp;nbsp;Graphlog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#contribute&quot;&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&quot;short-log&quot;&gt;Short&amp;nbsp;Log&lt;/h2&gt;
&lt;p&gt;In a &lt;a href=&quot;/tips/beginner/2009-10-07-shortlog-for-fun-and-profit/&quot;&gt;previous tip&lt;/a&gt; I described how to create an &lt;code&gt;hg slog&lt;/code&gt; alias that
can be very useful for counting changesets. With the right styling it can be
useful in your day-to-day work. Here&amp;#8217;s what the output of my &lt;code&gt;hg slog&lt;/code&gt; command
looks&amp;nbsp;like:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;
    &lt;a href=&quot;http://www.flickr.com/photos/sjl7678/4277311247/&quot;
       title=&quot;hg-slog by Steve Losh, on Flickr&quot;&gt;
        &lt;img src=&quot;http://farm5.static.flickr.com/4064/4277311247_343f88a399.jpg&quot;
             width=&quot;500&quot; height=&quot;488&quot; alt=&quot;hg-slog&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;To use this template you can &lt;a href=&quot;2009-09-30-configuring-mercurial.html&quot;&gt;edit your ~/.hgrc file&lt;/a&gt; to contain the&amp;nbsp;following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[alias]
slog = log --style=/full/path/to/map-cmdline.slog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;nice-log&quot;&gt;Nice&amp;nbsp;Log&lt;/h2&gt;
&lt;p&gt;The short log is great a quick review of the past few changesets, but for a
much more detailed view of a particular changeset I&amp;#8217;ve created an &lt;code&gt;hg nlog&lt;/code&gt;
alias, which looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;
    &lt;a href=&quot;http://www.flickr.com/photos/sjl7678/4278058138/&quot;
       title=&quot;hg-nlog by Steve Losh, on Flickr&quot;&gt;
        &lt;img src=&quot;http://farm5.static.flickr.com/4054/4278058138_4ecb312f11.jpg&quot;
             width=&quot;412&quot; height=&quot;500&quot; alt=&quot;hg-nlog&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;To use this template you can &lt;a href=&quot;2009-09-30-configuring-mercurial.html&quot;&gt;edit your ~/.hgrc file&lt;/a&gt; to contain the&amp;nbsp;following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[alias]
nlog = log --style=/full/path/to/map-cmdline.nlog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;short-graphlog&quot;&gt;Short&amp;nbsp;Graphlog&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;/tips/beginner/2009-10-03-stay-sane-with-graphlog/&quot;&gt;graphlog&lt;/a&gt; command is wonderful for reviewing the history of
repositories with branches, but we can make it more compact and easier to read
with another template. The result looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;
    &lt;a href=&quot;http://www.flickr.com/photos/sjl7678/4277311549/&quot;
       title=&quot;hg-sglog by Steve Losh, on Flickr&quot;&gt;
        &lt;img src=&quot;http://farm5.static.flickr.com/4045/4277311549_ae56e22012.jpg&quot;
             width=&quot;441&quot; height=&quot;500&quot; alt=&quot;hg-sglog&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;To use this template you can &lt;a href=&quot;2009-09-30-configuring-mercurial.html&quot;&gt;edit your ~/.hgrc file&lt;/a&gt; to contain the&amp;nbsp;following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[alias]
sglog = glog --style=/full/path/to/map-cmdline.sglog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;contribute&quot;&gt;Contribute&lt;/h2&gt;
&lt;p&gt;If you have any other templates you find useful, or some improvements to mine,
feel free to fork the &lt;a href=&quot;http://bitbucket.org/sjl/mercurial-cli-templates/&quot;&gt;repository&lt;/a&gt; on&amp;nbsp;BitBucket!&lt;/p&gt;
    
    
   </content></entry><entry><title>找出不寻常的变更集</title><author><name>Steve Losh</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/beginner/2009-12-09-finding-uncommon-changesets.html"/><updated>2009-12-09T00:00:00Z</updated><published>2009-12-09T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/beginner/2009-12-09-finding-uncommon-changesets.html/</id><content type="html">
       
    
    &lt;p&gt;这一技巧是从 &lt;a href=&quot;http://mercurial.selenic.com/wiki/MailingLists&quot;&gt;mercurial-devel 邮件列表&lt;/a&gt; 的&lt;a href=&quot;http://www.selenic.com/pipermail/mercurial-devel/2009-December/017417.html&quot;&gt;讨论&lt;/a&gt;中得到的灵感.&lt;/p&gt;
&lt;p&gt;问题的要点是:你是否能指出哪些变更可以包含在版本 &lt;code&gt;X&lt;/code&gt; 而不包含在 &lt;code&gt;Y&lt;/code&gt; 版本中?&amp;nbsp;这通常在你需要明确两个软件版本中确切的差异时很有用.&lt;/p&gt;
&lt;p&gt;这看起来很简单,但是有几个方面你都得同时考虑到.&lt;/p&gt;
&lt;p&gt;注意:我将运用 &lt;a href=&quot;/tips/beginner/2009-10-07-shortlog-for-fun-and-profit/&quot;&gt;精简日志&lt;/a&gt; 来使默认的 &lt;code&gt;hg log&lt;/code&gt; 输出更加可读.
虽然操作使用的是 &lt;code&gt;hg log&lt;/code&gt; (其实,已经用 &lt;code&gt;hg  slog&lt;/code&gt; 配置了别名来替代 &lt;code&gt;hg log&lt;/code&gt;),
所以,面对精简日志格式,请放轻松&amp;nbsp;;-)&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;简单方法(不完美的)&lt;/h3&gt;
&lt;p&gt;先从简单的方式, 用 &lt;code&gt;--rev&lt;/code&gt; 来列出版本,某仓库使用图形日志时的输出可能是:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg glog
o  4 Fix another bug. (6 seconds ago by Steve Losh) tip 
|
o  3 Fix a bug. (16 seconds ago by Steve Losh)  
|
@  2 Add another simple feature. (34 seconds ago by Steve Losh)  
|
o  1 Add a simple feature. (40 seconds ago by Steve Losh)  
|
o  0 Initial revision. (7 minutes ago by Steve Losh)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你目前在 版本&lt;code&gt;2&lt;/code&gt;,想知道如果升级到 &lt;code&gt;tip&lt;/code&gt; 得包含哪些变更集,先尝试:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ hg slog --rev 2:tip
 2 Add another simple feature. (5 minutes ago by Steve Losh) 
 3 Fix a bug. (5 minutes ago by Steve Losh) 
 4 Fix another bug. (5 minutes ago by Steve Losh) tip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会见到输出包含了 版本&lt;code&gt;2&lt;/code&gt;,实话说不应该列出来,不过,问题不大,你可以直接忽略.&lt;/p&gt;
&lt;p&gt;而且,这种方法,在你有多个分支时就囧了:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg glog
@  6 Fix a critical bug. (1 second ago by Steve Losh) tip 
|
| o  5 Start the rewrite of the UI. (24 seconds ago by Steve Losh)  ui-rewrite
| |
o |  4 Fix another bug. (8 minutes ago by Steve Losh)  
| |
o |  3 Fix a bug. (8 minutes ago by Steve Losh)  
| |
o |  2 Add another simple feature. (9 minutes ago by Steve Losh)  
|/
o  1 Add a simple feature. (9 minutes ago by Steve Losh)  
|
o  0 Initial revision. (16 minutes ago by Steve Losh)

$ hg slog --rev 2:tip
2 Add another simple feature. (9 minutes ago by Steve Losh) 
3 Fix a bug. (9 minutes ago by Steve Losh) 
4 Fix another bug. (9 minutes ago by Steve Losh) 
5 Start the rewrite of the UI. (54 seconds ago by Steve Losh) 
6 Fix a critical bug. (31 seconds ago by Steve Losh) tip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意到这时 &lt;code&gt;hg slog&lt;/code&gt; 的输出包含了版本&lt;code&gt;5&lt;/code&gt;.
这是个独立分支,当你从 版本&lt;code&gt;2&lt;/code&gt;升级到&lt;code&gt;tip&lt;/code&gt;(即版本&lt;code&gt;6&lt;/code&gt;)时,其实并没有包含版本&lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这是因为,你使用版本号来通告 Mercurial 进行处置的范畴.
&lt;code&gt;1:4&lt;/code&gt; 的含义就是 &amp;#8220;&lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, 到 &lt;code&gt;4&lt;/code&gt; 不论她们分布在什么分支上.&amp;#8221;&lt;/p&gt;
&lt;p&gt;使用扩展参数,可以可以令 &lt;code&gt;hg log&lt;/code&gt; 更加精确.&lt;/p&gt;
&lt;h3 id=&quot;_1&quot;&gt;当前方法&lt;/h3&gt;
&lt;p&gt;如果我们退回来思考要解决的问题,&amp;nbsp;就可以缩小问题的定义.其实我们要查阅:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标版本包含的变更(换而言之:继承的)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;除&lt;/strong&gt;了出发点版本已经包含的变更&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以用两个参数 &lt;code&gt;--rev&lt;/code&gt; 和 &lt;code&gt;--follow&lt;/code&gt; 来解决第一个问题:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg slog --rev tip:0 --follow
6 Fix a critical bug. (11 minutes ago by Steve Losh) tip
4 Fix another bug. (20 minutes ago by Steve Losh) 
3 Fix a bug. (20 minutes ago by Steve Losh) 
2 Add another simple feature. (20 minutes ago by Steve Losh) 
1 Add a simple feature. (21 minutes ago by Steve Losh) 
0 Initial revision. (28 minutes ago by Steve Losh)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意,这就没有包含其它分支上的变更了.&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;--rev DESTINATION:0&lt;/code&gt; 配合 &lt;code&gt;--follow&lt;/code&gt; 
表达&amp;#8221;展示&lt;code&gt;DESTINATION&lt;/code&gt;所有继承的变更&amp;#8221;.
用 &lt;code&gt;hg help log&lt;/code&gt; 来进一步了解所有参数细节.&lt;/p&gt;
&lt;p&gt;现在就剩一件事儿了 &amp;#8212;&amp;nbsp;我们要清除当前版本已包含的变更:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg slog --rev tip:0 --follow --prune 2
6 Fix a critical bug. (16 minutes ago by Steve Losh) tip
4 Fix another bug. (25 minutes ago by Steve Losh) 
3 Fix a bug. (25 minutes ago by Steve Losh)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就酱! 在我们的仓库中,变更集&lt;code&gt;6&lt;/code&gt;,&lt;code&gt;4&lt;/code&gt;和&lt;code&gt;3&lt;/code&gt; 是从 &lt;code&gt;2&lt;/code&gt; 升级到 &lt;code&gt;6&lt;/code&gt; 需要历经的变更.&lt;/p&gt;
&lt;p&gt;最终命令应该是这样的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hg slog --rev DESTINATION:0 --follow --prune SOURCE
          |     |        ||     |       |     +-- 出发版本号
          |     |        ||     |       +-- 剔除指定版本包含的变更集
          |     |        ||     +-- 跟随变更路径,而不是无视分支
          |     |        |+-- 对比到底部版本
          |     |        +-- 连续版本
          |     +-- 目标版本号
          +-- 指定版本号范畴
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然,你可以用版本的指代快捷形式.
例如,要查阅从当前版本升级到 &lt;code&gt;tip&lt;/code&gt;(顶端)时包含的变更:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hg slog -r tip:0 -fP .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意: 这一命令在你向后升级时&lt;strong&gt;不&lt;/strong&gt;工作.那将仅显示你已经追加的变更
&amp;#8212; 不会涉及 已经在 &lt;code&gt;SOURCE&lt;/code&gt; 中但&lt;strong&gt;不&lt;/strong&gt;在 &lt;code&gt;DESTINATION&lt;/code&gt; 中的变更.&lt;/p&gt;
    
    
   </content></entry><entry><title>二进制文件的合并</title><author><name>Ryan Wilcox</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2009-11-30-merging-binary-files.html"/><updated>2009-11-30T00:00:00Z</updated><published>2009-11-30T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2009-11-30-merging-binary-files.html/</id><content type="html">
       
    
    &lt;p&gt;比如说,你在构建一个web站点,将使用的图片也用 Mercurial 进行了管理.&amp;nbsp;若同时有两个人对图片进行了变更就引发了二进制文件的冲突.&lt;/p&gt;
&lt;h3 id=&quot;mercurial-setting-up-mercurial-for-different-merge-tools&quot;&gt;为合并工具配置 Mercurial  Setting up Mercurial for Different Merge&amp;nbsp;Tools&lt;/h3&gt;
&lt;p&gt;在你的 &lt;code&gt;~/.hgrc&lt;/code&gt; 文件中,先增订如下配置:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[merge-tools]
diff_images.args = $output $other

[merge-patterns]
**.png = diff_images
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在,创建 &lt;code&gt;diff_images&lt;/code&gt; 脚本,并配置为可执行,丢到 &lt;code&gt;$PATH&lt;/code&gt; 里,类似:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;open -a GraphicConverter $1 $2 -W 
# 用GraphicConverter 打开第一/二参数进行处置
# 直到返回,再继续脚本运行.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在遇到&lt;code&gt;.png&lt;/code&gt; 文件的合并冲突时,将使用 &lt;code&gt;GraphicConverter&lt;/code&gt;打开两个图片:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前你工作中目录中的&lt;/li&gt;
&lt;li&gt;存在Mercurial&amp;nbsp;仓库中的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你能轻易的识别出这两种文件,因为从 Mercurial 中提取的图片有个随机字母组成的很长的扩展名.
例如,如果冲突的文件是&lt;code&gt;image.png&lt;/code&gt;那么 
GraphicConverter 在两个窗口打开: &lt;code&gt;image.png&lt;/code&gt; 和 &lt;code&gt;image.png〜other.bQkQxd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;手动移动新的文件到原文件(&lt;code&gt;image.png&lt;/code&gt;)以确认更改,
保存,完成后 &lt;code&gt;GraphicConverter&lt;/code&gt; 就退出.&amp;nbsp;现在就可以检入变更了.&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;工作原理&lt;/h3&gt;
&lt;p&gt;首先,通过 &lt;code&gt;diff_images.args&lt;/code&gt; 配置两个参数用调用图像工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$output&lt;/code&gt; 指Mercurial&amp;nbsp;将检入的文件,包含继承自父辈的变更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$other&lt;/code&gt; 指准备进行合并的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实,还有其它 &lt;code&gt;.args&lt;/code&gt; 参数可用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$local&lt;/code&gt; 是 &lt;code&gt;$output&lt;/code&gt; 的复本,不过合并会忽略文件的历史变更集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$base&lt;/code&gt; 是发生分岐前的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您能用这些设置三种合并方式,
提高&lt;code&gt;diff_images&lt;/code&gt; 的展现能力,向用户出示合并 &lt;em&gt;前&lt;/em&gt;&amp;nbsp;发生了什么.&lt;/p&gt;
&lt;p&gt;接下来的 &lt;code&gt;[merge-patterns]&lt;/code&gt; 部分,声明对匹配什么模式的文件使用合并工具.&lt;/p&gt;
&lt;p&gt;如果没有 &lt;code&gt;merge-pattern&lt;/code&gt; 这节配置,
&lt;code&gt;diff_images&lt;/code&gt;会作为差异处置候选程序,
很可能因 Mercurual 判定 &lt;code&gt;diff_images&lt;/code&gt; 不操作二进制文件差异而被略过.
添加了 &lt;code&gt;[merge-pattern]&lt;/code&gt; 就会告之 Mercurial &lt;code&gt;diff_images&lt;/code&gt; 
可以处理的文件类型,从而达到效果.&lt;/p&gt;
&lt;p&gt;另外,可以用 &lt;code&gt;diff_images.args&lt;/code&gt; 来替代&lt;code&gt;merge-patterns&lt;/code&gt;
告诉 Mercurial &lt;code&gt;diff_images&lt;/code&gt; 可以处理二进制文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;diff_images.binary= TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然而,这将使 &lt;code&gt;diff_images&lt;/code&gt; 尝试对 &lt;em&gt;所有&lt;/em&gt; 二进制文件进行差异处理,
对 &lt;code&gt;GraphicConverter&lt;/code&gt; 而言显然 &lt;span class=&quot;caps&quot;&gt;HOLD&lt;/span&gt; 不住
(例如,对mp3音乐文件进行差异处理,肯定不是 &lt;code&gt;GraphicConverter&lt;/code&gt; 能作的)&lt;/p&gt;
&lt;h3 id=&quot;_1&quot;&gt;发生恶性错误时:中止合并&lt;/h3&gt;
&lt;p&gt;合并 &lt;em&gt;不能&lt;/em&gt; 通过标准的 &lt;code&gt;hg revert&lt;/code&gt; 来恢复.&amp;nbsp;尝试一下,你会得到:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg revert --all
abort: uncommitted merge - please provide a specific revision
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过,要是想放弃你的合并,从头再来.
使用&lt;code&gt;hg update --clean&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;_2&quot;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mercurial.selenic.com/wiki/MergeToolConfiguration&quot;&gt;Merge Tool Configuration on the Mercurial&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mercurial.selenic.com/bts/issue1533&quot;&gt;Issue 1533: &amp;#8220;abort: outstanding uncommitted merges should mention update&amp;nbsp;-C&amp;#8221;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mercurial.selenic.com/wiki/BinaryFiles&quot;&gt;Binary Files in Mercurial explained, on the Mercurial&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    
   </content></entry><entry><title>恢复整乱的文件</title><author><name>Ryan Wilcox</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/beginner/2009-11-30-reverting-dirty-files.html"/><updated>2009-11-30T00:00:00Z</updated><published>2009-11-30T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/beginner/2009-11-30-reverting-dirty-files.html/</id><content type="html">
       
    
    &lt;p&gt;好吧,你想放弃一些不靠谱的修订:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg status
M fileone.txt
M filetwo.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;逐一打开这些文件手工修订回去,那绝对是坑爹的.
所以,Mercurial 提供了专用命令: &lt;code&gt;hg revert&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg revert filetwo.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你要一次次放弃N个文件的变更,使用 &lt;code&gt;--all&lt;/code&gt; 开关:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg revert --all
reverting fileone.txt
reverting filetwo.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于 Git 宅而言,这一命令效果同 &lt;code&gt;git reset --hard HEAD^&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;译注&lt;/strong&gt;:
这个技巧的前提是你还没有用 &lt;code&gt;hg ci&lt;/code&gt; 将变更检入仓库,
如果你想恢复几个版本前的文件状态(多数情况下,是几个特定的文件) 那就要使用 &lt;code&gt;hg merge&lt;/code&gt; 小心的对指定文件的指定版本进行合并了&amp;#8230;&lt;/p&gt;
    
    
   </content></entry><entry><title>仓库整合</title><author><name>Steve Losh</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2009-11-17-combining-repositories.html"/><updated>2009-11-17T00:00:00Z</updated><published>2009-11-17T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2009-11-17-combining-repositories.html/</id><content type="html">
       
    
    &lt;p&gt;Thomas 分享的技巧 &lt;a href=&quot;2009-11-16-using-convert-to-decompose-your-repository.html&quot;&gt;分解仓库 &lt;/a&gt; 令俺意识到,相反的需求乍整?&amp;nbsp;将两个仓库整合为一个.&lt;/p&gt;
&lt;p&gt;比如,你的项目,代码都在 &lt;code&gt;project&lt;/code&gt; 仓库,而文档都在 &lt;code&gt;docs&lt;/code&gt;.&amp;nbsp;发觉这么搞很蛋痛,决定整合在一起方便大家.&lt;/p&gt;
&lt;p&gt;你 &lt;em&gt;可以&lt;/em&gt; 创建新仓库,并复制入所有相关数据,
但是这样一来,就无法保留历史变更了.&amp;nbsp;让我们来研究一下怎么完美作到仓库的整合.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;创建全新的目标仓库&lt;/h2&gt;
&lt;p&gt;首先创建目标新仓库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls
total 24
drwxr-xr-x  5 sjl   170B Nov 17 19:56 docs
drwxr-xr-x  4 sjl   136B Nov 17 19:58 project

$ mv project project-code

$ hg init project

$ ls
total 24
drwxr-xr-x  5 sjl   170B Nov 17 19:56 docs
drwxr-xr-x  3 sjl   102B Nov 17 20:04 project
drwxr-xr-x  4 sjl   136B Nov 17 19:58 project-code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们先将原 &lt;code&gt;project&lt;/code&gt; 仓库变成 &lt;code&gt;project-code&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;_1&quot;&gt;整理好各仓库&lt;/h2&gt;
&lt;p&gt;我们当然不想将所有东西吐到新仓库的根目录里.
所以,首先我们将原 &lt;code&gt;project&lt;/code&gt; 仓库的数据迁移到 &lt;code&gt;src/&lt;/code&gt; 目录里:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd project-code

$ mkdir src

$ mv * src
mv: rename src to src/src: Invalid argument

$ ls
total 0
drwxr-xr-x  3 sjl   102B Nov 17 20:08 src

$ hg addremove --similarity 100
removing myproject.py
adding src/myproject.py
recording removal of myproject.py as rename to src/myproject.py (100% similar)

$ hg commit -m &#39;Move the code into the src/ directory.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同理对&lt;code&gt;doc&lt;/code&gt; 仓库也进行处理:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ../docs

$ mkdir docs

$ mv * docs
mv: rename docs to docs/docs: Invalid argument

$ ls
total 0
drwxr-xr-x  4 sjl   136B Nov 17 20:11 docs

$ hg addremove --similarity 100
removing LICENSE
removing README
adding docs/LICENSE
adding docs/README
recording removal of LICENSE as rename to docs/LICENSE (100% similar)
recording removal of README as rename to docs/README (100% similar)

$ hg commit -m &#39;Move the documentation into the docs/ directory.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;_2&quot;&gt;拉入全部仓库&lt;/h2&gt;
&lt;p&gt;现在,我们已经调整好了仓库结构,需要将原仓库逐一拉入 &lt;code&gt;project&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ..

$ ls
total 24
drwxr-xr-x  4 sjl   136B Nov 17 20:12 docs
drwxr-xr-x  3 sjl   102B Nov 17 20:04 project
drwxr-xr-x  4 sjl   136B Nov 17 20:08 project-code

$ cd project

$ ls

$ hg pull --update ../project-code
pulling from ../project-code
requesting all changes
adding changesets
adding manifests
adding file changes
added 4 changesets with 4 changes to 2 files
1 files updated, 0 files merged, 0 files removed, 0 files unresolved

$ ls
total 0
drwxr-xr-x  3 sjl   102B Nov 17 20:15 src

$ hg pull --force --update ../docs
pulling from ../docs
searching for changes
warning: repository is unrelated
adding changesets
adding manifests
adding file changes
added 3 changesets with 4 changes to 4 files (+1 heads)
not updating, since new heads added
(run &#39;hg heads&#39; to see heads, &#39;hg merge&#39; to merge)

$ ls
total 0
drwxr-xr-x  3 sjl   102B Nov 17 20:15 src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意,我们在 &lt;code&gt;hg pull&lt;/code&gt; 时使用 &lt;code&gt;--force&lt;/code&gt; 标记来告诉 Mercurial:&amp;nbsp;&amp;#8221;没事儿,俺知道俺在作什么,俺真的要将这俩仓库合并起来.&amp;#8221;&lt;/p&gt;
&lt;h2 id=&quot;_3&quot;&gt;合并仓库&lt;/h2&gt;
&lt;p&gt;回顾一下最后那个 &lt;code&gt;ls&lt;/code&gt; 命令的输出.
为毛只有 &lt;code&gt;src/&lt;/code&gt; 目录?
那是因为我们必须进行合并,才真正完成仓库的 &lt;code&gt;整合&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;先来观察一下新仓库的图形日志,来明确真实情况:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg glog
o  6 Move the documentation into the docs/ directory. (7 minutes ago by Steve Losh) tip
|
o  5 Add a LICENSE file. (22 minutes ago by Steve Losh)
|
o  4 Add a README file. (22 minutes ago by Steve Losh)

@  3 Move the code into the src/ directory. (10 minutes ago by Steve Losh)
|
o  2 Fix a bug. (21 minutes ago by Steve Losh)
|
o  1 Implement some basic functionality. (21 minutes ago by Steve Losh)
|
o  0 Start the project. (21 minutes ago by Steve Losh)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到了吧,实际上有两个版本树.
变更集0到3是有关联的,而4一直链接到6,不过,3和4却没有什么关联.
现在我们要将这两个版本树焊接到一起.&amp;nbsp;这其实牵扯的事儿很小,毕竟之前也没有什么关联:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg update 6
2 files updated, 0 files merged, 1 files removed, 0 files unresolved

$ hg merge 3
1 files updated, 0 files merged, 0 files removed, 0 files unresolved
(branch merge, don&#39;t forget to commit)

$ hg commit -m &#39;Combine the source and docs repositories.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在再观察一下树图:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg glog
@    7 Combine the source and docs repositories. (37 seconds ago by Steve Losh) tip
|\
| o  6 Move the documentation into the docs/ directory. (11 minutes ago by Steve Losh)
| |
| o  5 Add a LICENSE file. (26 minutes ago by Steve Losh)
| |
| o  4 Add a README file. (27 minutes ago by Steve Losh)
|
o  3 Move the code into the src/ directory. (15 minutes ago by Steve Losh)
|
o  2 Fix a bug. (25 minutes ago by Steve Losh)
|
o  1 Implement some basic functionality. (25 minutes ago by Steve Losh)
|
o  0 Start the project. (26 minutes ago by Steve Losh)

$ ls
total 0
drwxr-xr-x  4 sjl   136B Nov 17 20:22 docs
drwxr-xr-x  3 sjl   102B Nov 17 20:22 src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们原先两个仓库,已经完美合并成了一个!&amp;nbsp;现在可以删除旧仓库,将新仓库提供给大伙使用了.&lt;/p&gt;
&lt;p&gt;更加&lt;span class=&quot;caps&quot;&gt;NB&lt;/span&gt;的是,因为实际上我们并没有改变历史变更集的散列值,&amp;nbsp;这意味着原先使用独立仓库的老用户,可以无缝使用新仓库!&lt;/p&gt;
    
    
   </content></entry><entry><title>用 Convert 来分解仓库</title><author><name>Thomas G. Willis</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2009-11-16-using-convert-to-decompose-your-repository.html"/><updated>2009-11-16T00:00:00Z</updated><published>2009-11-16T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2009-11-16-using-convert-to-decompose-your-repository.html/</id><content type="html">
       
    
    &lt;p&gt;如果你的仓库包含了很多项目(目录).&lt;/p&gt;
&lt;p&gt;现在,你决定将每个项目(目录)拆分到独立仓库.
那么,使用 &lt;code&gt;convert&lt;/code&gt; 扩展来处置,还能保留历史变更.&lt;/p&gt;
&lt;p&gt;例如,当前仓库是这样的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/yourrepository
    /DatabaseFoo
    /SweetBusinessLogic
    /BaseUI
    /AnotherDamnContentManagementSystem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若认定 &lt;code&gt;AnotherDamnContentManagementSystem&lt;/code&gt; 真的要启用独立仓库,&amp;nbsp;并且能预见到继续和其它项目混到一起进行版本控制,很囧很杯具.&lt;/p&gt;
&lt;p&gt;那么,你非常幸运的可以使用 &lt;code&gt;convert&lt;/code&gt; 扩展快速完成调整,而不耽搁和风投进行午餐.&lt;/p&gt;
&lt;p&gt;首先 &lt;a href=&quot;2009-09-30-configuring-mercurial.html&quot;&gt;激活 convert 扩展&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[extensions]
convert =
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;convert&lt;/code&gt; 命令有 &lt;code&gt;--filemap&lt;/code&gt; 参数,可以指定哪些目录进行转换,哪些忽略.
你甚至可以将更名包含到操作里.
一般 &lt;code&gt;--filemap&lt;/code&gt; 这么来定义:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include AnotherDamnContentManagementSystem
rename .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后,就可以这么调用&lt;code&gt;convert&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hg convert --filemap myfilemap bigrepo AnotherDamnContentManagementSystem-Repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;齐活儿.
现在 &lt;code&gt;AnotherDamnContentManagementSystem&lt;/code&gt; 已经在自个儿的仓库中了.&lt;/p&gt;
    
    
   </content></entry><entry><title>使用 Git 镜像</title><author><name>Steve Losh</name></author><link href="http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2009-11-09-create-a-git-mirror.html"/><updated>2009-11-09T00:00:00Z</updated><published>2009-11-09T00:00:00Z</published><id>http://hgtip.com/http://zoomquiet.github.com/hgtip/advanced/2009-11-09-create-a-git-mirror.html/</id><content type="html">
       
    
    &lt;p&gt;相对其它类似Mercurial 的分布式版本控制系统,
&lt;a href=&quot;http://git-scm.com&quot;&gt;git&lt;/a&gt; 是最流行的一种.
如果你的项目使用 Mercurial,
可以轻松的建立一个 git 镜像仓库,这样,那些 git&amp;nbsp;用户就可以对你的项目进行方便的贡献了!&lt;/p&gt;
&lt;h3 id=&quot;hg-git&quot;&gt;安装&amp;nbsp;hg-git&lt;/h3&gt;
&lt;p&gt;首先,你得下载 &lt;a href=&quot;http://hg-git.github.com/&quot;&gt;hg-git&lt;/a&gt;&amp;nbsp;插件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;easy_install dulwich
hg clone http://bitbucket.org/durin42/hg-git/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;提示:&lt;/strong&gt; 当前Python&amp;nbsp;环境有更好的模块管理系统,可以使用一行命令完成安装:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pip install hg-git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在&lt;a href=&quot;2009-09-30-configuring-mercurial.html&quot;&gt;修订你的 &lt;code&gt;~/.hgrc&lt;/code&gt; &lt;/a&gt;&amp;nbsp;包含:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[extensions]
hggit = /path/to/hg-git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;github&quot;&gt;创建 GitHub&amp;nbsp;帐号&lt;/h3&gt;
&lt;p&gt;你肯定需要有地儿部署你的git 镜像,&lt;a href=&quot;http://github.com/&quot;&gt;GitHub&lt;/a&gt; 是最好的选择.
到 GitHub 的&lt;a href=&quot;http://github.com/plans&quot;&gt;注册&lt;/a&gt; 页面先创建个帐号吧.&amp;nbsp;当然已经有了最好.&lt;/p&gt;
&lt;h3 id=&quot;github_1&quot;&gt;在 GitHub&amp;nbsp;创建仓库&lt;/h3&gt;
&lt;p&gt;使用 &amp;#8220;New Repository&amp;#8221;&amp;nbsp;按钮创建仓库先.&lt;/p&gt;
&lt;p&gt;一但创建了仓库,你应该可以见到如下页面:&lt;/p&gt;
&lt;div class=&quot;screenshot&quot;&gt;
    &lt;a href=&quot;http://www.flickr.com/photos/sjl7678/4091674740/&quot; title=&quot;GitHub New Repo Sample by Steve Losh, on Flickr&quot;&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2580/4091674740_f6d488f9a5.jpg&quot; width=&quot;432&quot; height=&quot;500&quot; alt=&quot;GitHub New Repo Sample&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;的到 &lt;code&gt;git@github.com:username/project.git&lt;/code&gt; ?&amp;nbsp;用你的帐号名,替换对应用户名,这将用以推送镜像仓库.&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;发布你的项目&lt;/h3&gt;
&lt;p&gt;现在安装好了 &lt;code&gt;hg-git&lt;/code&gt; 并创建了对应的 GitHub 镜像仓库,你需要将己有的 Mercurial 仓库推送进 GitHub.
首先,要将 git 的仓库地址增订到你的 Mercurial 仓库中的 &lt;code&gt;.hg/hgrc&lt;/code&gt; 配置中:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[paths]
git = git+ssh://git@github.com/username/project.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;重要提示:&lt;/strong&gt; 你得用&lt;code&gt;/&lt;/code&gt;(正斜杠)来替代&lt;code&gt;github.com&lt;/code&gt; 后的&lt;code&gt;:&lt;/code&gt;.因为这是 Mercurial&amp;nbsp;的仓库访问格式.&lt;/p&gt;
&lt;p&gt;当然,你也得将 &lt;code&gt;username&lt;/code&gt; 和 &lt;code&gt;project&lt;/code&gt; 根据之前的 git&amp;nbsp;仓库信息进行替换.&lt;/p&gt;
&lt;p&gt;现在,你要向 &lt;code&gt;git&lt;/code&gt; 推送,以便创建镜像:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hg push git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你的仓库很太,这将消耗些时间.
一担正常完成,你的Mercurial 仓库就拥有了一个 100% 的git仓库镜像,
git 用户可以使用 &lt;code&gt;git clone git://github.com/username/project.git&lt;/code&gt; 来克隆你的化,加入开发,而没有意识到你其实在用&amp;nbsp;mercurial.&lt;/p&gt;
&lt;h3 id=&quot;_1&quot;&gt;接受贡献&lt;/h3&gt;
&lt;p&gt;为 git 用户创建仓库镜像很简单,
(如果你的项目很有趣)终究会有人在GitHub 里向你发出下拉申请的,这时,如何简单的将 git 用户的修订,下拉到 Mercurial&amp;nbsp;仓库来?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hg-git&lt;/code&gt; 让一切轻松自在.
首先要将贡献者的分支仓库追加到你的项目路径中(增补 &lt;code&gt;.hg/hgrc&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[paths]
git = git+ssh://git@github.com/username/project.git
contributor = git+ssh://git@github.com/contributor_username/project.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次提醒, &lt;strong&gt;将&lt;code&gt;github.com&lt;/code&gt;后的&lt;code&gt;:&lt;/code&gt;用&lt;code&gt;/&lt;/code&gt; (正斜杠)替代!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后就可以 pull 那些变更集到你的 Mercurial&amp;nbsp;仓库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hg pull contributor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以使用 &lt;a href=&quot;/tips/beginner/2009-10-03-stay-sane-with-graphlog/&quot;&gt;graphlog&lt;/a&gt;&amp;nbsp;来非常直观的观察(如果需要合并时).&lt;/p&gt;
&lt;p&gt;合并你需要的(想要的), 再将这些贡献推送到你的Mercurial 主仓库以及 git&amp;nbsp;镜像仓库:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hg push
hg push git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上是基本操作!
如果你有很变态的多分支开发流程,那么事儿就洧这么简单,
不过,当前小贴士足以使你用习惯的方式来接受来自 git&amp;nbsp;用户的贡献.&lt;/p&gt;
    
    
   </content></entry></feed>